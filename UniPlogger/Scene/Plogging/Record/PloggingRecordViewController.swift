//
//  PloggingRecordViewController.swift
//  UniPlogger
//
//  Created by 손병근 on 2020/10/22.
//  Copyright (c) 2020 손병근. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Then

protocol PloggingRecordDisplayLogic: class {
    func displayFetchRecord(viewModel: PloggingRecord.FetchRecord.ViewModel)
    func displayError(error: Common.CommonError, useCase: PloggingRecord.UseCase)
}

class PloggingRecordViewController: UIViewController, PloggingRecordDisplayLogic {
    var interactor: PloggingRecordBusinessLogic?
    var router: (NSObjectProtocol & PloggingRecordRoutingLogic & PloggingRecordDataPassing)?
    
    var capturedImage: UIImage?
    
    // MARK: - Views
    var scrollView = ScrollStackView()
    
    lazy var skipButton = UIButton().then{
        $0.setAttributedTitle(UPStyle().font(.roboto(ofSize: 15, weight: .bold)).color(UIColor(hexString: "#999999")).kern(1.25).apply(to: "SKIP"), for: .normal)
        $0.titleLabel?.font = .roboto(ofSize: 15, weight: .bold)
        $0.setTitleColor(.init(red: 196, green: 196, blue: 196), for: .normal)
        $0.addTarget(self, action: #selector(skipButtonTapped), for: .touchUpInside)
    }
    let titleLabel = UILabel().then{
        $0.text = "오늘 어떤 쓰레기를 주우셨나요?"
        $0.font = .notoSans(ofSize: 16, weight: .bold)
        $0.textAlignment = .center
    }
    
    let subtitleLabel = UILabel().then{
        $0.text = "버튼을 길게 눌러 세부 리스트를 확인할 수 있습니다."
        $0.font = .notoSans(ofSize: 12, weight: .regular)
        $0.textAlignment = .center
    }
    
    lazy var collectionView = IntrinsicSizeCollectionView(frame: .zero, collectionViewLayout: PloggingRecordCollectionViewLayout()).then {
        $0.backgroundColor = .clear
        $0.dataSource = self
        $0.delegate = self
        $0.allowsMultipleSelection = true
        $0.register(PloggingRecordCollectionViewCell.self, forCellWithReuseIdentifier: "PloggingRecordCollectionViewCell")
    }
    
    let nextButtonView = UIView().then{
        $0.backgroundColor = .buttonEnabled
        $0.layer.cornerRadius = 26
        $0.layer.masksToBounds = true
    }
    
    let nextLabel = UILabel().then{
        $0.text = "NEXT"
        $0.textColor = UIColor(hexString: "#999999")
        $0.font = .roboto(ofSize: 15, weight: .bold)
    }
    
    let nextImageView = UIImageView().then{
        $0.contentMode = .center
        $0.image = UIImage(named: "ic_BtnNextRight")?.withRenderingMode(.alwaysTemplate)
        $0.tintColor = UIColor(hexString: "#999999")
    }
    
    lazy var nextButton = UIButton().then{
        $0.addTarget(self, action: #selector(nextButtonTapped), for: .touchUpInside
        )
    }
    
    
    var selectedItems: [Int] = []
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = PloggingRecordInteractor()
        let presenter = PloggingRecordPresenter()
        let router = PloggingRecordRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.configuration()
        self.setupView()
        self.setupLayout()
        self.setButtonEnabled(false)
        self.interactor?.fetchRecord()
    }
    
    func displayFetchRecord(viewModel: PloggingRecord.FetchRecord.ViewModel) {
//        self.distanceLabel.text = viewModel.distance
//        self.timeLabel.text = viewModel.time
    }
    
    func displayError(error: Common.CommonError, useCase: PloggingRecord.UseCase){
        //handle error with its usecase
    }
    
    @objc func skipButtonTapped(){
        self.selectedItems = []
        self.collectionView.reloadData()
        let alert = UIAlertController(title: "플로깅 인증 사진을\n촬영하시겠습니까?", message: "사진 촬영을 위해 사진앱을 실행합니다.", preferredStyle: .alert)
        let okAction = UIAlertAction(title: "실행", style: .default) { (_) in
            self.router?.routeToCamera()
        }
        let cancelAction = UIAlertAction(title: "취소", style: .cancel, handler: nil)
        alert.addAction(okAction)
        alert.addAction(cancelAction)
        self.present(alert, animated: true, completion: nil)
        
    }
    
    @objc func nextButtonTapped(){
        let alert = UIAlertController(title: "플로깅 인증 사진을\n촬영하시겠습니까?", message: "사진 촬영을 위해 사진앱을 실행합니다.", preferredStyle: .alert)
        let okAction = UIAlertAction(title: "실행", style: .default) { (_) in
            self.router?.routeToCamera()
        }
        let cancelAction = UIAlertAction(title: "취소", style: .cancel, handler: nil)
        alert.addAction(okAction)
        alert.addAction(cancelAction)
        self.present(alert, animated: true, completion: nil)
        
    }
    
    @objc func handleLongPress(gesture : UILongPressGestureRecognizer!) {
            if gesture.state != .ended {
                return
            }

            let p = gesture.location(in: self.collectionView)

            if let indexPath = self.collectionView.indexPathForItem(at: p) {
                // get the cell at indexPath (the one you long pressed)
                let item = PloggingItemType.allCases[indexPath.item]
                let detailView = TrashDetailPopupView(type: item)
                detailView.modalTransitionStyle = .crossDissolve
                detailView.modalPresentationStyle = .overFullScreen
                self.present(detailView, animated: true, completion: nil)
                // do stuff with the cell
            } else {
                print("couldn't find index path")
            }
        }
    
    func setButtonEnabled(_ isEnabled: Bool) {
        self.nextButtonView.backgroundColor = isEnabled ? .buttonEnabled : .clear
        self.nextButtonView.layer.borderColor = isEnabled ? UIColor.clear.cgColor : UIColor(hexString: "#999999").cgColor
        self.nextButtonView.layer.borderWidth = isEnabled ? 0 : 0.5
        self.nextButton.isEnabled = isEnabled
        self.nextLabel.textColor = .text
        self.nextImageView.tintColor = .text
        
    }
}

extension PloggingRecordViewController: UICollectionViewDataSource{
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        
        return PloggingItemType.allCases.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier:  "PloggingRecordCollectionViewCell", for: indexPath) as? PloggingRecordCollectionViewCell else { fatalError() }
        let item = PloggingItemType.allCases[indexPath.item]
        let isSelected = self.selectedItems.contains(indexPath.item)
        cell.viewModel = .init(title: item.description, isSelected: isSelected)
        let gesture =  UILongPressGestureRecognizer(target: self, action: #selector(handleLongPress))
        cell.addGestureRecognizer(gesture)
        return cell
    }
}

extension PloggingRecordViewController: UICollectionViewDelegate{
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        if selectedItems.contains(indexPath.item), let index = selectedItems.firstIndex(of: indexPath.item){
            selectedItems.remove(at: index)
        }else{
            selectedItems.append(indexPath.item)
        }
        
        if self.selectedItems.isEmpty {
            setButtonEnabled(false)
        } else {
            setButtonEnabled(true)
        }
        self.collectionView.reloadData()
    }
}

extension PloggingRecordViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        dismiss(animated: true) {
            self.capturedImage = info[UIImagePickerController.InfoKey.editedImage] as? UIImage
            self.router?.routeToShare()
        }
    }
}

